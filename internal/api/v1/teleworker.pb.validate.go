// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/teleworker.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on StartRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StartRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCommand()) < 1 {
		return StartRequestValidationError{
			field:  "Command",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetMemoryLimitMb() != 0 {

		if m.GetMemoryLimitMb() <= 0 {
			return StartRequestValidationError{
				field:  "MemoryLimitMb",
				reason: "value must be greater than 0",
			}
		}

	}

	if m.GetCpuWeight() != 0 {

		if val := m.GetCpuWeight(); val < 1 || val > 100 {
			return StartRequestValidationError{
				field:  "CpuWeight",
				reason: "value must be inside range [1, 100]",
			}
		}

	}

	if m.GetIoWeight() != 0 {

		if val := m.GetIoWeight(); val < 1 || val > 100 {
			return StartRequestValidationError{
				field:  "IoWeight",
				reason: "value must be inside range [1, 100]",
			}
		}

	}

	return nil
}

// StartRequestValidationError is the validation error returned by
// StartRequest.Validate if the designated constraints aren't met.
type StartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartRequestValidationError) ErrorName() string { return "StartRequestValidationError" }

// Error satisfies the builtin error interface
func (e StartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartRequestValidationError{}

// Validate checks the field values on StartResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StartResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JobId

	return nil
}

// StartResponseValidationError is the validation error returned by
// StartResponse.Validate if the designated constraints aren't met.
type StartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartResponseValidationError) ErrorName() string { return "StartResponseValidationError" }

// Error satisfies the builtin error interface
func (e StartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartResponseValidationError{}

// Validate checks the field values on StopRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StopRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetJobId()) != 36 {
		return StopRequestValidationError{
			field:  "JobId",
			reason: "value length must be 36 runes",
		}

	}

	return nil
}

// StopRequestValidationError is the validation error returned by
// StopRequest.Validate if the designated constraints aren't met.
type StopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopRequestValidationError) ErrorName() string { return "StopRequestValidationError" }

// Error satisfies the builtin error interface
func (e StopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopRequestValidationError{}

// Validate checks the field values on StopResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StopResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// StopResponseValidationError is the validation error returned by
// StopResponse.Validate if the designated constraints aren't met.
type StopResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopResponseValidationError) ErrorName() string { return "StopResponseValidationError" }

// Error satisfies the builtin error interface
func (e StopResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopResponseValidationError{}

// Validate checks the field values on StatusRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetJobId()) != 36 {
		return StatusRequestValidationError{
			field:  "JobId",
			reason: "value length must be 36 runes",
		}

	}

	return nil
}

// StatusRequestValidationError is the validation error returned by
// StatusRequest.Validate if the designated constraints aren't met.
type StatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusRequestValidationError) ErrorName() string { return "StatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusRequestValidationError{}

// Validate checks the field values on StatusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StatusResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for MemoryLimitMb

	// no validation rules for CpuLimitPercentage

	// no validation rules for IoLimitPercentage

	// no validation rules for ExitCode

	return nil
}

// StatusResponseValidationError is the validation error returned by
// StatusResponse.Validate if the designated constraints aren't met.
type StatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusResponseValidationError) ErrorName() string { return "StatusResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusResponseValidationError{}

// Validate checks the field values on StreamRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StreamRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetJobId()) != 36 {
		return StreamRequestValidationError{
			field:  "JobId",
			reason: "value length must be 36 runes",
		}

	}

	// no validation rules for StreamErrors

	return nil
}

// StreamRequestValidationError is the validation error returned by
// StreamRequest.Validate if the designated constraints aren't met.
type StreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamRequestValidationError) ErrorName() string { return "StreamRequestValidationError" }

// Error satisfies the builtin error interface
func (e StreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamRequestValidationError{}

// Validate checks the field values on StreamResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StreamResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OutStream

	return nil
}

// StreamResponseValidationError is the validation error returned by
// StreamResponse.Validate if the designated constraints aren't met.
type StreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamResponseValidationError) ErrorName() string { return "StreamResponseValidationError" }

// Error satisfies the builtin error interface
func (e StreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamResponseValidationError{}
