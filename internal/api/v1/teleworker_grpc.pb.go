// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeleWorkerClient is the client API for TeleWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeleWorkerClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (TeleWorker_StreamClient, error)
}

type teleWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewTeleWorkerClient(cc grpc.ClientConnInterface) TeleWorkerClient {
	return &teleWorkerClient{cc}
}

func (c *teleWorkerClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/v1.TeleWorker/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teleWorkerClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/v1.TeleWorker/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teleWorkerClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/v1.TeleWorker/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teleWorkerClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (TeleWorker_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TeleWorker_ServiceDesc.Streams[0], "/v1.TeleWorker/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &teleWorkerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TeleWorker_StreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type teleWorkerStreamClient struct {
	grpc.ClientStream
}

func (x *teleWorkerStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TeleWorkerServer is the server API for TeleWorker service.
// All implementations must embed UnimplementedTeleWorkerServer
// for forward compatibility
type TeleWorkerServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Stream(*StreamRequest, TeleWorker_StreamServer) error
	mustEmbedUnimplementedTeleWorkerServer()
}

// UnimplementedTeleWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedTeleWorkerServer struct {
}

func (UnimplementedTeleWorkerServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedTeleWorkerServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedTeleWorkerServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedTeleWorkerServer) Stream(*StreamRequest, TeleWorker_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedTeleWorkerServer) mustEmbedUnimplementedTeleWorkerServer() {}

// UnsafeTeleWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeleWorkerServer will
// result in compilation errors.
type UnsafeTeleWorkerServer interface {
	mustEmbedUnimplementedTeleWorkerServer()
}

func RegisterTeleWorkerServer(s grpc.ServiceRegistrar, srv TeleWorkerServer) {
	s.RegisterService(&TeleWorker_ServiceDesc, srv)
}

func _TeleWorker_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeleWorkerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeleWorker/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeleWorkerServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeleWorker_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeleWorkerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeleWorker/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeleWorkerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeleWorker_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeleWorkerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeleWorker/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeleWorkerServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeleWorker_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TeleWorkerServer).Stream(m, &teleWorkerStreamServer{stream})
}

type TeleWorker_StreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type teleWorkerStreamServer struct {
	grpc.ServerStream
}

func (x *teleWorkerStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TeleWorker_ServiceDesc is the grpc.ServiceDesc for TeleWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeleWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.TeleWorker",
	HandlerType: (*TeleWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _TeleWorker_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _TeleWorker_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _TeleWorker_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TeleWorker_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/teleworker.proto",
}
